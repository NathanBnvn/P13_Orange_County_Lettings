
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.0.3
  heroku: circleci/heroku@1.2.6

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run linting
          command: flake8

      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest
  

  dockerize:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $DOCKER_HUB_USERNAME/orange_county_lettings:$CIRCLE_SHA1 .
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_USER_PWD
            docker push $DOCKER_HUB_USERNAME/orange_county_lettings:$CIRCLE_SHA1

  deploy-to-prod:
    machine: true
    steps:
      - checkout
      - run:
          name: Push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            heroku container:login
            heroku container:push web
            docker tag $DOCKER_HUB_USERNAME/orange_county_lettings:$CIRCLE_SHA1 registry.heroku.com/oc-lettings-23/web
            docker push registry.heroku.com/oc-lettings-23/web

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  master-branch: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test:
          filters:
            branches:
              only: master
      - dockerize:
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy-to-prod:
          requires:
            - dockerize
          filters:
            branches:
              only: master
  
  other-branch:
    jobs:
    - build-and-test:
        filters:
          branches:
            ignore: master